{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ANÁLISIS DE DEPARTAMENTOS DEL PAÍS Y SUCURSALES DE BANCOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#El trabajo final integrador de la especialización consiste en el desarrollo de un modelo que describa y mida las correlaciones existentes entre datos demográficos y geográficos del negocio bancario y determine las reglas de localización de entidades financieras físicas.\n",
    "#Se propone realizar un análisis de clúster con datos demográficos a fin de agrupar y caracterizar departamentos, para luego relevar con herramientas de sistemas de información geográfica (GIS) las correlaciones existentes. La comparación a nivel geográfico de las agrupaciones de departamentos y la presencia bancaria actual permitirá describir las reglas de correlación y sus variaciones geográficas.\n",
    "\n",
    "#Para el trabajo práctico presente, se realizará un análisis de los datos del dataset y se ensayará un modelo de regresión para estudiar si es posible estimar las localizaciones con los datos relevados."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1) CARGA DE DATOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark\n",
    "findspark.init()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "spark = (\n",
    "    SparkSession.builder\n",
    "    .appName(\"test\")\n",
    "    .config(\"spark.driver.memory\", \"512m\")\n",
    "    .config(\"spark.driver.cores\", \"1\")\n",
    "    .config(\"spark.executor.memory\", \"512m\")\n",
    "    .config(\"spark.executor.cores\", \"1\")\n",
    "    .config(\"spark.sql.shuffle.partitions\", \"2\")\n",
    "    .getOrCreate()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.4.5'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spark.version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "dft = spark.read.csv('/dataset/Dataset SI.csv', header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
n",
      "|Orden|   Provincia|Codigo|Departamento/Partido|Cantidad de filiales|Hay filiales|Mas de cinco filiales|Mas de cincuenta filiales|Pisos con revestimiento|Agua por cañeria dentro de la vivienda|Agua para beber y cocinar por red publica|Baño o letrina dentro de la vivienda|Dos o mas baños|Baño con inodoro con arrastre de agua|Desagüe del inodoro del baño a red publica|Gas de red o electricidad para cocinar|Vivienda propia|Internet|Celular con internet|Computadora tablet etc|Inspeccion en plazo|Equipo de inspeccion|\n",
      "+-----+------------+------+--------------------+--------------------+------------+---------------------+-------------------------+-----------------------+--------------------------------------+-----------------------------------------+------------------------------------+---------------+-------------------------------------+------------------------------------------+--------------------------------------+---------------+--------+--------------------+----------------------+-------------------+--------------------+\n",
      "|    1|BUENOS AIRES|    BA|          25 DE MAYO|                   6|          SI|                   NO|                       NO|                   90.9|                                  95.4|                                       87|                                  98|           23.1|                                 95.1|                                      57.7|                                  53.1|           64.9|    72.8|                85.5|                  53.8|                 SI|                  SI|\n",
      "|    2|BUENOS AIRES|    BA|          9 DE JULIO|                   3|          SI|                   SI|                       NO|                   93.6|                                  96.7|                                     79.8|                                98.9|           26.1|                                 96.5|                                      69.9|                                  66.6|           64.8|    81.4|                  89|                  58.2|                 SI|                  SI|\n",
      "|    3|BUENOS AIRES|    BA|       ADOLFO ALSINA|                   7|          SI|                   NO|                       NO|                   95.6|                                  97.2|                                     90.4|                                98.8|           18.1|                                 97.5|                                      49.7|                                  75.7|           69.2|    80.9|                88.3|                  56.4|                 SI|                  NO|\n",
      "|    4|BUENOS AIRES|    BA|ADOLFO GONZALES C...|                   3|          SI|                   SI|                       NO|                   96.4|                                  97.4|                                     91.1|                                  99|           22.7|                                 97.8|                                      53.1|                                  69.4|           68.7|    78.4|                88.2|                    60|                 SI|                  SI|\n",
      "|    5|BUENOS AIRES|    BA|             ALBERTI|                   3|          SI|                   SI|                       NO|                     93|                                  96.3|                                     71.3|                                98.2|             27|                                 96.2|                                      77.1|                                  61.3|           69.2|    79.2|                87.6|                  58.3|                 NO|                  NO|\n",
      "|    6|BUENOS AIRES|    BA|     ALMIRANTE BROWN|                  24|          SI|                   NO|                       NO|                   83.7|                                  90.5|                                     54.8|                                96.3|           20.3|                                 85.4|                                      41.4|                                  65.1|           73.3|      83|                91.6|                  55.9|                 NO|                  NO|\n",
      "|    7|BUENOS AIRES|    BA|           ARRECIFES|                   6|          SI|                   NO|                       NO|                   89.9|                                  96.9|                                     95.4|                                97.8|           21.9|                                   95|                                      73.9|                                  59.4|           69.7|    79.7|                88.3|                  51.5|                 SI|                  SI|\n",
      "|    8|BUENOS AIRES|    BA|          AVELLANEDA|                  18|          SI|                   NO|                       NO|                   92.9|                                  96.4|                                     96.6|                                96.4|           23.7|                                 94.3|                                      81.1|                                  78.2|             64|    85.6|                92.4|                  65.3|                 SI|                  NO|\n",
      "|    9|BUENOS AIRES|    BA|            AYACUCHO|                   2|          SI|                   SI|                       NO|                   92.6|                                    97|                                     89.4|                                  99|           24.5|                                 98.1|                                      82.9|                                  68.9|           64.8|    74.3|                85.7|                  51.7|                 NO|                  SI|\n",
      "|   10|BUENOS AIRES|    BA|                AZUL|                   8|          SI|                   NO|                       NO|                   93.8|                                  96.2|                                     93.1|                                98.1|           25.1|                                 95.3|                                      81.4|                                  78.2|           67.9|    76.6|                87.7|                    58|                 NO|                  NO|\n",
n",
      "only showing top 10 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dft.show(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Orden: string (nullable = true)\n",
      " |-- Provincia: string (nullable = true)\n",
      " |-- Codigo: string (nullable = true)\n",
      " |-- Departamento/Partido: string (nullable = true)\n",
      " |-- Cantidad de filiales: string (nullable = true)\n",
      " |-- Hay filiales: string (nullable = true)\n",
      " |-- Mas de cinco filiales: string (nullable = true)\n",
      " |-- Mas de cincuenta filiales: string (nullable = true)\n",
      " |-- Pisos con revestimiento: string (nullable = true)\n",
      " |-- Agua por cañeria dentro de la vivienda: string (nullable = true)\n",
      " |-- Agua para beber y cocinar por red publica: string (nullable = true)\n",
      " |-- Baño o letrina dentro de la vivienda: string (nullable = true)\n",
      " |-- Dos o mas baños: string (nullable = true)\n",
      " |-- Baño con inodoro con arrastre de agua: string (nullable = true)\n",
      " |-- Desagüe del inodoro del baño a red publica: string (nullable = true)\n",
      " |-- Gas de red o electricidad para cocinar: string (nullable = true)\n",
      " |-- Vivienda propia: string (nullable = true)\n",
      " |-- Internet: string (nullable = true)\n",
      " |-- Celular con internet: string (nullable = true)\n",
      " |-- Computadora tablet etc: string (nullable = true)\n",
      " |-- Inspeccion en plazo: string (nullable = true)\n",
      " |-- Equipo de inspeccion: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "dft.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#2) LIMPIEZA Y ANÁLISIS DE DATOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pyspark.sql.types as t\n",
    "test_schema = t.StructType([\n",
    "      t.StructField('Orden', t.IntegerType(), True)\n",
    "    , t.StructField('Provincia', t.StringType(), True)\n",
    "    , t.StructField('Codigo', t.StringType(), True)\n",
    "    , t.StructField('Departamento/Partido', t.StringType(), True)\n",
    "    , t.StructField('Cantidad de filiales', t.IntegerType(), True)\n",
    "    , t.StructField('Hay filiales', t.StringType(), True)\n",
    "    , t.StructField('Mas de cinco filiales', t.StringType(), True)\n",
    "    , t.StructField('Mas de cincuenta filiales', t.StringType(), True)\n",
    "    , t.StructField('PCR', t.DoubleType(), True)\n",
    "    , t.StructField('ACDV', t.DoubleType(), True)\n",
    "    , t.StructField('ARP', t.DoubleType(), True)\n",
    "    , t.StructField('BLV', t.DoubleType(), True)\n",
    "    , t.StructField('DMB', t.DoubleType(), True)\n",
    "    , t.StructField('BIAA', t.DoubleType(), True)\n",
    "    , t.StructField('DIRP', t.DoubleType(), True)\n",
    "    , t.StructField('GEC', t.DoubleType(), True)\n",
    "    , t.StructField('VP', t.DoubleType(), True)\n",
    "    , t.StructField('INT', t.DoubleType(), True)\n",
    "    , t.StructField('CINT', t.DoubleType(), True)\n",
    "    , t.StructField('CTE', t.DoubleType(), True)\n",
    "    , t.StructField('Inspeccion en plazo', t.StringType(), True)\n",
    "    , t.StructField('Equipo de inspeccion', t.StringType(), True)\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Orden: integer (nullable = true)\n",
      " |-- Provincia: string (nullable = true)\n",
      " |-- Codigo: string (nullable = true)\n",
      " |-- Departamento/Partido: string (nullable = true)\n",
      " |-- Cantidad de filiales: integer (nullable = true)\n",
      " |-- Hay filiales: string (nullable = true)\n",
      " |-- Mas de cinco filiales: string (nullable = true)\n",
      " |-- Mas de cincuenta filiales: string (nullable = true)\n",
      " |-- PCR: double (nullable = true)\n",
      " |-- ACDV: double (nullable = true)\n",
      " |-- ARP: double (nullable = true)\n",
      " |-- BLV: double (nullable = true)\n",
      " |-- DMB: double (nullable = true)\n",
      " |-- BIAA: double (nullable = true)\n",
      " |-- DIRP: double (nullable = true)\n",
      " |-- GEC: double (nullable = true)\n",
      " |-- VP: double (nullable = true)\n",
      " |-- INT: double (nullable = true)\n",
      " |-- CINT: double (nullable = true)\n",
      " |-- CTE: double (nullable = true)\n",
      " |-- Inspeccion en plazo: string (nullable = true)\n",
      " |-- Equipo de inspeccion: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df = spark.read.csv(\"/dataset/Dataset SI.csv\", header=True, schema=test_schema)\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "496"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Los datos de las columnas Inspección en plazo y Equipo de inspección corresponden a características de los relevamientos. Estos datos se consideran no relacionados con el objetivo del estudio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Orden: integer (nullable = true)\n",
      " |-- Provincia: string (nullable = true)\n",
      " |-- Codigo: string (nullable = true)\n",
      " |-- Departamento/Partido: string (nullable = true)\n",
      " |-- Cantidad de filiales: integer (nullable = true)\n",
      " |-- Hay filiales: string (nullable = true)\n",
      " |-- Mas de cinco filiales: string (nullable = true)\n",
      " |-- Mas de cincuenta filiales: string (nullable = true)\n",
      " |-- PCR: double (nullable = true)\n",
      " |-- ACDV: double (nullable = true)\n",
      " |-- ARP: double (nullable = true)\n",
      " |-- BLV: double (nullable = true)\n",
      " |-- DMB: double (nullable = true)\n",
      " |-- BIAA: double (nullable = true)\n",
      " |-- DIRP: double (nullable = true)\n",
      " |-- GEC: double (nullable = true)\n",
      " |-- VP: double (nullable = true)\n",
      " |-- INT: double (nullable = true)\n",
      " |-- CINT: double (nullable = true)\n",
      " |-- CTE: double (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df = df.drop('Inspeccion en plazo')\n",
    "df = df.drop('Equipo de inspeccion')\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+---------+------+--------------------+\n",
      "|Orden|Provincia|Codigo|Departamento/Partido|\n",
      "+-----+---------+------+--------------------+\n",
      "|    0|        0|     2|                   0|\n",
      "+-----+---------+------+--------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import isnan, when, count, col\n",
    "\n",
    "# All columns\n",
    "# cols = df.columns\n",
    "# Selected columns\n",
    "cols_1 = ['Orden', 'Provincia', 'Codigo', 'Departamento/Partido']\n",
    "\n",
    "# https://stackoverflow.com/a/44631639/570393\n",
    "df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in cols_1]).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+------------+---------------------+-------------------------+\n",
      "|Cantidad de filiales|Hay filiales|Mas de cinco filiales|Mas de cincuenta filiales|\n",
      "+--------------------+------------+---------------------+-------------------------+\n",
      "|                   0|           0|                    0|                        0|\n",
      "+--------------------+------------+---------------------+-------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cols_2 = ['Cantidad de filiales', 'Hay filiales', 'Mas de cinco filiales', 'Mas de cincuenta filiales']\n",
    "\n",
    "df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in cols_2]).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---+----+---+---+---+----+\n",
      "|PCR|ACDV|ARP|BLV|DMB|BIAA|\n",
      "+---+----+---+---+---+----+\n",
      "|  0|   0|  0|  0|  0|   0|\n",
      "+---+----+---+---+---+----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cols_3 = ['PCR', 'ACDV', 'ARP', \n",
    "          'BLV' , 'DMB' , 'BIAA']\n",
    "\n",
    "df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in cols_3]).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+---+---+---+----+---+\n",
      "|DIRP|GEC| VP|INT|CINT|CTE|\n",
      "+----+---+---+---+----+---+\n",
      "|   0|  0|  0|  0|   0|  0|\n",
      "+----+---+---+---+----+---+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "cols_4 = ['DIRP' , 'GEC','VP' ,\n",
    "          'INT' , 'CINT' , 'CTE']\n",
    "\n",
    "df.select([count(when(isnan(c) | col(c).isNull(), c)).alias(c) for c in cols_4]).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Hay valores nulos en la columna código. Se elimina la columna, dado que replica la información de la columna provincia."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Orden: integer (nullable = true)\n",
      " |-- Provincia: string (nullable = true)\n",
      " |-- Departamento/Partido: string (nullable = true)\n",
      " |-- Cantidad de filiales: integer (nullable = true)\n",
      " |-- Hay filiales: string (nullable = true)\n",
      " |-- Mas de cinco filiales: string (nullable = true)\n",
      " |-- Mas de cincuenta filiales: string (nullable = true)\n",
      " |-- PCR: double (nullable = true)\n",
      " |-- ACDV: double (nullable = true)\n",
      " |-- ARP: double (nullable = true)\n",
      " |-- BLV: double (nullable = true)\n",
      " |-- DMB: double (nullable = true)\n",
      " |-- BIAA: double (nullable = true)\n",
      " |-- DIRP: double (nullable = true)\n",
      " |-- GEC: double (nullable = true)\n",
      " |-- VP: double (nullable = true)\n",
      " |-- INT: double (nullable = true)\n",
      " |-- CINT: double (nullable = true)\n",
      " |-- CTE: double (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df = df.drop('Codigo')\n",
    "df.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de 'SI': 418\n",
      "Cantidad de 'NO': 78\n"
     ]
    }
   ],
   "source": [
    "columna1 = 'Hay filiales'\n",
    "\n",
    "conteo_si_1 = df.filter(col(columna1) == 'SI').count()\n",
    "conteo_no_1 = df.filter(col(columna1) == 'NO').count()\n",
    "\n",
    "print(f\"Cantidad de 'SI': {conteo_si_1}\")\n",
    "print(f\"Cantidad de 'NO': {conteo_no_1}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('SI', 'NO')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categorias = ('SI','NO')\n",
    "categorias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(418, 78)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conteo_1 = (conteo_si_1,conteo_no_1)\n",
    "conteo_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Proporción de Departamentos con Filiales')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "colores = ['blue', 'red']\n",
    "plt.bar(categorias, conteo_1, color=colores)\n",
    "plt.title(\"Proporción de Departamentos con Filiales\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de 'SI': 339\n",
      "Cantidad de 'NO': 157\n"
     ]
    }
   ],
   "source": [
    "columna2 = 'Mas de cinco filiales'\n",
    "\n",
    "conteo_si_2 = df.filter(col(columna2) == 'SI').count()\n",
    "conteo_no_2 = df.filter(col(columna2) == 'NO').count()\n",
    "\n",
    "print(f\"Cantidad de 'SI': {conteo_si_2}\")\n",
    "print(f\"Cantidad de 'NO': {conteo_no_2}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(339, 157)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conteo_2 = (conteo_si_2,conteo_no_2)\n",
    "conteo_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Proporción de Departamentos con más de cinco Filiales')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "colores = ['blue', 'red']\n",
    "plt.bar(categorias, conteo_2, color=colores)\n",
    "plt.title(\"Proporción de Departamentos con más de cinco Filiales\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de 'SI': 7\n",
      "Cantidad de 'NO': 489\n"
     ]
    }
   ],
   "source": [
    "columna3 = 'Mas de cincuenta filiales'\n",
    "\n",
    "conteo_si_3 = df.filter(col(columna3) == 'SI').count()\n",
    "conteo_no_3 = df.filter(col(columna3) == 'NO').count()\n",
    "\n",
    "print(f\"Cantidad de 'SI': {conteo_si_3}\")\n",
    "print(f\"Cantidad de 'NO': {conteo_no_3}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7, 489)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conteo_3 = (conteo_si_3,conteo_no_3)\n",
    "conteo_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Proporción de Departamentos con más de cincuenta Filiales')"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "colores = ['blue', 'red']\n",
    "plt.bar(categorias, conteo_3, color=colores)\n",
    "plt.title(\"Proporción de Departamentos con más de cincuenta Filiales\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#La proporción de departamentos con presencia bancaria es muy elevada, con un 85% de localizaciones cubiertas por el negocio bancario.\n",
    "#La proporción para presencia de cinco o más sucursales se reduce al 50%. \n",
    "#Finalmente, la presencia de más de cincuenta sucursales se reduce a solo 7 departamentos, lo que se corresponde al número de grandes centros urbanos del país. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+----+----+----+----+----+----+----+----+----+----+\n",
      "|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|\n",
      "+----+----+----+----+----+----+----+----+----+----+----+\n",
      "|95.4|87.0|98.0|23.1|95.1|57.7|53.1|64.9|72.8|85.5|53.8|\n",
      "|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|\n",
      "|97.2|90.4|98.8|18.1|97.5|49.7|75.7|69.2|80.9|88.3|56.4|\n",
      "|97.4|91.1|99.0|22.7|97.8|53.1|69.4|68.7|78.4|88.2|60.0|\n",
      "|96.3|71.3|98.2|27.0|96.2|77.1|61.3|69.2|79.2|87.6|58.3|\n",
      "|90.5|54.8|96.3|20.3|85.4|41.4|65.1|73.3|83.0|91.6|55.9|\n",
      "|96.9|95.4|97.8|21.9|95.0|73.9|59.4|69.7|79.7|88.3|51.5|\n",
      "|96.4|96.6|96.4|23.7|94.3|81.1|78.2|64.0|85.6|92.4|65.3|\n",
      "|97.0|89.4|99.0|24.5|98.1|82.9|68.9|64.8|74.3|85.7|51.7|\n",
      "|96.2|93.1|98.1|25.1|95.3|81.4|78.2|67.9|76.6|87.7|58.0|\n",
      "+----+----+----+----+----+----+----+----+----+----+----+\n",
      "only showing top 10 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df2 = df.select(df.columns[8:19])\n",
    "df2.show(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.stat import Correlation\n",
    "from pyspark.ml.feature import VectorAssembler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# convert to vector column first\n",
    "vector_col = \"corr_features\"\n",
    "assembler = VectorAssembler(inputCols=df2.columns, outputCol=vector_col)\n",
    "df2_vector = assembler.transform(df2).select(vector_col)\n",
    "matrix = Correlation.corr(df2_vector, vector_col)\n",
    "cor_np = matrix.collect()[0][matrix.columns[0]].toArray()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        ,  0.53325475,  0.92551715,  0.48664077,  0.96654444,\n",
       "         0.58178241,  0.62828395, -0.69603464,  0.7842555 ,  0.7096927 ,\n",
       "         0.78829678],\n",
       "       [ 0.53325475,  1.        ,  0.34465516,  0.18188727,  0.54307467,\n",
       "         0.43822877,  0.30614314, -0.31090665,  0.27177607,  0.25862695,\n",
       "         0.3554776 ],\n",
       "       [ 0.92551715,  0.34465516,  1.        ,  0.4720325 ,  0.88564485,\n",
       "         0.49803522,  0.61231937, -0.65591332,  0.79495139,  0.79383415,\n",
       "         0.79957353],\n",
       "       [ 0.48664077,  0.18188727,  0.4720325 ,  1.        ,  0.44724043,\n",
       "         0.56514509,  0.57299435, -0.46257579,  0.62657976,  0.60208806,\n",
       "         0.7607408 ],\n",
       "       [ 0.96654444,  0.54307467,  0.88564485,  0.44724043,  1.        ,\n",
       "         0.53735018,  0.58853448, -0.68422907,  0.72924178,  0.64946439,\n",
       "         0.75381821],\n",
       "       [ 0.58178241,  0.43822877,  0.49803522,  0.56514509,  0.53735018,\n",
       "         1.        ,  0.64482956, -0.59087816,  0.6100043 ,  0.49256124,\n",
       "         0.64695267],\n",
       "       [ 0.62828395,  0.30614314,  0.61231937,  0.57299435,  0.58853448,\n",
       "         0.64482956,  1.        , -0.6505534 ,  0.72659093,  0.56521076,\n",
       "         0.78104861],\n",
       "       [-0.69603464, -0.31090665, -0.65591332, -0.46257579, -0.68422907,\n",
       "        -0.59087816, -0.6505534 ,  1.        , -0.70582889, -0.52843898,\n",
       "        -0.72042507],\n",
       "       [ 0.7842555 ,  0.27177607,  0.79495139,  0.62657976,  0.72924178,\n",
       "         0.6100043 ,  0.72659093, -0.70582889,  1.        ,  0.78202282,\n",
       "         0.91519633],\n",
       "       [ 0.7096927 ,  0.25862695,  0.79383415,  0.60208806,  0.64946439,\n",
       "         0.49256124,  0.56521076, -0.52843898,  0.78202282,  1.        ,\n",
       "         0.8152639 ],\n",
       "       [ 0.78829678,  0.3554776 ,  0.79957353,  0.7607408 ,  0.75381821,\n",
       "         0.64695267,  0.78104861, -0.72042507,  0.91519633,  0.8152639 ,\n",
       "         1.        ]])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cor_np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fb4391c55c0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(16,5))  \n",
    "sns.heatmap(cor_np,  cmap=\"Blues\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Evaluada la correlación de los datos, se encuentran valores superiores al 95% en tres casos de 66 combinaciones. No es evidencian conjuntos de series de datos correlacionados para justificar la creación de componentes nuevas por PCA. Se opta por mantener el dataset original."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "#3)INGENIERÍA DE ATRIBUTOS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+----------------------+\n",
      "|          Provincia|Filiales por Provincia|\n",
      "+-------------------+----------------------+\n",
      "|       BUENOS AIRES|                  1303|\n",
      "|               CABA|                   817|\n",
      "|           SANTA FE|                   448|\n",
      "|            CORDOBA|                   418|\n",
      "|         ENTRE RIOS|                   117|\n",
      "|         CORRIENTES|                    80|\n",
      "|          RIO NEGRO|                    78|\n",
      "|            NEUQUEN|                    71|\n",
      "|            TUCUMAN|                    71|\n",
      "|           LA PAMPA|                    70|\n",
      "|             CHUBUT|                    64|\n",
      "|              CHACO|                    62|\n",
      "|              SALTA|                    59|\n",
      "|           MISIONES|                    55|\n",
      "|SANTIAGO DEL ESTERO|                    54|\n",
      "|         SANTA CRUZ|                    49|\n",
      "|           SAN LUIS|                    42|\n",
      "|           SAN JUAN|                    33|\n",
      "|              JUJUY|                    31|\n",
      "|           LA RIOJA|                    26|\n",
      "+-------------------+----------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import sum\n",
    "\n",
    "resultado = df.groupBy(\"Provincia\").agg(sum(\"Cantidad de Filiales\").alias(\"Filiales por Provincia\"))\n",
    "resultado_ordenado = resultado.orderBy(\"Filiales por Provincia\", ascending=False)\n",
    "\n",
    "resultado_ordenado.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pyspark.sql.functions import sum, rank\n",
    "from pyspark.sql.window import Window\n",
    "\n",
    "resultado_pandas = resultado_ordenado.toPandas()\n",
    "\n",
    "ventana = Window.orderBy(resultado[\"Filiales por Provincia\"].desc())\n",
    "resultado_con_rango = resultado.withColumn(\"rango\", rank().over(ventana))\n",
    "\n",
    "# Define el número de filas para cada grupo\n",
    "top5 = 4\n",
    "siguientes8 = 17 \n",
    "\n",
    "# Asigna colores en función del rango\n",
    "colores = ['red' if 1 <= rango <= top5 else 'yellow' if top5 < rango <= siguientes8 else 'blue' for rango in resultado_con_rango.select(\"rango\").rdd.flatMap(lambda x: x).collect()]\n",
    "\n",
    "# Convierte el DataFrame de PySpark a pandas\n",
    "resultado_pandas = resultado_con_rango.toPandas()\n",
    "\n",
    "# Crea el gráfico de barras con colores asignados\n",
    "ax = resultado_pandas.plot.bar(y='Filiales por Provincia', x = \"Provincia\", color=colores, legend=False)\n",
    "\n",
    "# Muestra el gráfico\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Existe una diferencia distribución de filiales bastante marcada en tres grupos distintos. Esto implica que hay Provincias con mayor probabilidad de tener Filiales bancarias. \n",
    "#Se propone crear una nueva variable que pondere esta probabilidad: el valor normalizado (entre 0 y 1) de la suma de Filiales por Provincia.\n",
    "#Por otro lado, se normaliza el dato de la columna Cantidad de filiales. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1303"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyspark.sql.functions import max\n",
    "\n",
    "max_filiales = resultado_ordenado.agg(max(\"Filiales por Provincia\").alias(\"max_filiales\")).collect()[0][\"max_filiales\"]\n",
    "max_filiales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------------+----------------------+--------------------+\n",
      "|          Provincia|Filiales por Provincia|            Cociente|\n",
      "+-------------------+----------------------+--------------------+\n",
      "|       BUENOS AIRES|                  1303|                 1.0|\n",
      "|               CABA|                   817|  0.6270145817344589|\n",
      "|           SANTA FE|                   448| 0.34382194934765925|\n",
      "|            CORDOBA|                   418|  0.3207981580966999|\n",
      "|         ENTRE RIOS|                   117| 0.08979278587874137|\n",
      "|         CORRIENTES|                    80| 0.06139677666922486|\n",
      "|          RIO NEGRO|                    78|0.059861857252494245|\n",
      "|            NEUQUEN|                    71| 0.05448963929393707|\n",
      "|            TUCUMAN|                    71| 0.05448963929393707|\n",
      "|           LA PAMPA|                    70| 0.05372217958557176|\n",
      "|             CHUBUT|                    64| 0.04911742133537989|\n",
      "|              CHACO|                    62|0.047582501918649274|\n",
      "|              SALTA|                    59| 0.04528012279355334|\n",
      "|           MISIONES|                    55|  0.0422102839600921|\n",
      "|SANTIAGO DEL ESTERO|                    54| 0.04144282425172678|\n",
      "|         SANTA CRUZ|                    49| 0.03760552570990023|\n",
      "|           SAN LUIS|                    42| 0.03223330775134305|\n",
      "|           SAN JUAN|                    33| 0.02532617037605526|\n",
      "|              JUJUY|                    31|0.023791250959324637|\n",
      "|           LA RIOJA|                    26|0.019953952417498082|\n",
      "+-------------------+----------------------+--------------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "resultado_ordenado_cocientes = resultado_ordenado.withColumn(\"Cociente\", col(\"Filiales por Provincia\") / max_filiales)\n",
    "resultado_ordenado_cocientes.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|   Provincia|Orden|Departamento/Partido|Cantidad de filiales|Hay filiales|Mas de cinco filiales|Mas de cincuenta filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|\n",
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|BUENOS AIRES|    1|          25 DE MAYO|                   6|          SI|                   NO|                       NO|90.9|95.4|87.0|98.0|23.1|95.1|57.7|53.1|64.9|72.8|85.5|53.8|     1.0|\n",
      "|BUENOS AIRES|    2|          9 DE JULIO|                   3|          SI|                   SI|                       NO|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|\n",
      "|BUENOS AIRES|    3|       ADOLFO ALSINA|                   7|          SI|                   NO|                       NO|95.6|97.2|90.4|98.8|18.1|97.5|49.7|75.7|69.2|80.9|88.3|56.4|     1.0|\n",
      "|BUENOS AIRES|    4|ADOLFO GONZALES C...|                   3|          SI|                   SI|                       NO|96.4|97.4|91.1|99.0|22.7|97.8|53.1|69.4|68.7|78.4|88.2|60.0|     1.0|\n",
      "|BUENOS AIRES|    5|             ALBERTI|                   3|          SI|                   SI|                       NO|93.0|96.3|71.3|98.2|27.0|96.2|77.1|61.3|69.2|79.2|87.6|58.3|     1.0|\n",
      "|BUENOS AIRES|    6|     ALMIRANTE BROWN|                  24|          SI|                   NO|                       NO|83.7|90.5|54.8|96.3|20.3|85.4|41.4|65.1|73.3|83.0|91.6|55.9|     1.0|\n",
      "|BUENOS AIRES|    7|           ARRECIFES|                   6|          SI|                   NO|                       NO|89.9|96.9|95.4|97.8|21.9|95.0|73.9|59.4|69.7|79.7|88.3|51.5|     1.0|\n",
      "|BUENOS AIRES|    8|          AVELLANEDA|                  18|          SI|                   NO|                       NO|92.9|96.4|96.6|96.4|23.7|94.3|81.1|78.2|64.0|85.6|92.4|65.3|     1.0|\n",
      "|BUENOS AIRES|    9|            AYACUCHO|                   2|          SI|                   SI|                       NO|92.6|97.0|89.4|99.0|24.5|98.1|82.9|68.9|64.8|74.3|85.7|51.7|     1.0|\n",
      "|BUENOS AIRES|   10|                AZUL|                   8|          SI|                   NO|                       NO|93.8|96.2|93.1|98.1|25.1|95.3|81.4|78.2|67.9|76.6|87.7|58.0|     1.0|\n",
      "|BUENOS AIRES|   11|        BAHIA BLANCA|                  36|          SI|                   NO|                       NO|95.4|97.1|96.4|98.5|29.5|96.7|83.8|85.1|61.3|85.9|92.8|69.6|     1.0|\n",
      "|BUENOS AIRES|   12|            BALCARCE|                   8|          SI|                   NO|                       NO|91.6|96.4|90.3|97.9|27.5|95.8|82.2|68.1|65.4|75.9|86.2|57.6|     1.0|\n",
      "|BUENOS AIRES|   13|            BARADERO|                   3|          SI|                   SI|                       NO|89.7|96.1|93.4|97.3|21.4|92.6|68.4|54.1|68.4|76.2|89.2|55.0|     1.0|\n",
      "|BUENOS AIRES|   14|       BENITO JUAREZ|                   5|          SI|                   NO|                       NO|94.8|97.5|90.2|99.2|22.6|98.0|65.5|79.7|66.5|74.0|85.5|56.5|     1.0|\n",
      "|BUENOS AIRES|   15|         BERAZATEGUI|                  13|          SI|                   NO|                       NO|85.8|95.0|89.8|96.7|23.1|90.0|77.1|67.4|71.1|86.3|92.7|58.3|     1.0|\n",
      "|BUENOS AIRES|   16|             BERISSO|                   4|          SI|                   SI|                       NO|85.0|91.5|91.5|95.7|22.9|87.2|50.2|63.2|73.6|82.1|90.9|57.2|     1.0|\n",
      "|BUENOS AIRES|   17|             BOLIVAR|                  22|          SI|                   NO|                       NO|94.0|97.8|92.0|98.8|23.4|97.3|79.1|68.3|64.8|74.3|85.5|53.7|     1.0|\n",
      "|BUENOS AIRES|   18|             BRAGADO|                   7|          SI|                   NO|                       NO|92.8|96.7|86.8|98.6|25.5|95.4|69.9|70.2|71.1|85.3|90.0|59.4|     1.0|\n",
      "|BUENOS AIRES|   19|            BRANDSEN|                   3|          SI|                   SI|                       NO|86.4|93.3|63.3|97.7|23.1|91.0|47.4|42.0|69.0|68.5|87.5|52.2|     1.0|\n",
      "|BUENOS AIRES|   20|             CAMPANA|                   6|          SI|                   NO|                       NO|87.8|94.2|89.4|96.4|26.7|88.1|55.2|63.4|67.3|80.7|91.8|60.2|     1.0|\n",
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_fe = df.join(resultado_ordenado_cocientes.select(\"Provincia\", \"Cociente\"), \"Provincia\", \"left_outer\")\n",
    "\n",
    "df_fe.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "817"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_cantidad = df_fe.agg(max(\"Cantidad de filiales\").alias(\"max_cantidad\")).collect()[0][\"max_cantidad\"]\n",
    "max_cantidad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|   Provincia|Orden|Departamento/Partido|Cantidad de filiales|Hay filiales|Mas de cinco filiales|Mas de cincuenta filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|\n",
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|BUENOS AIRES|    1|          25 DE MAYO|0.007343941248470...|          SI|                   NO|                       NO|90.9|95.4|87.0|98.0|23.1|95.1|57.7|53.1|64.9|72.8|85.5|53.8|     1.0|\n",
      "|BUENOS AIRES|    2|          9 DE JULIO|0.003671970624235...|          SI|                   SI|                       NO|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|\n",
      "|BUENOS AIRES|    3|       ADOLFO ALSINA|0.008567931456548347|          SI|                   NO|                       NO|95.6|97.2|90.4|98.8|18.1|97.5|49.7|75.7|69.2|80.9|88.3|56.4|     1.0|\n",
      "|BUENOS AIRES|    4|ADOLFO GONZALES C...|0.003671970624235...|          SI|                   SI|                       NO|96.4|97.4|91.1|99.0|22.7|97.8|53.1|69.4|68.7|78.4|88.2|60.0|     1.0|\n",
      "|BUENOS AIRES|    5|             ALBERTI|0.003671970624235...|          SI|                   SI|                       NO|93.0|96.3|71.3|98.2|27.0|96.2|77.1|61.3|69.2|79.2|87.6|58.3|     1.0|\n",
      "|BUENOS AIRES|    6|     ALMIRANTE BROWN| 0.02937576499388005|          SI|                   NO|                       NO|83.7|90.5|54.8|96.3|20.3|85.4|41.4|65.1|73.3|83.0|91.6|55.9|     1.0|\n",
      "|BUENOS AIRES|    7|           ARRECIFES|0.007343941248470...|          SI|                   NO|                       NO|89.9|96.9|95.4|97.8|21.9|95.0|73.9|59.4|69.7|79.7|88.3|51.5|     1.0|\n",
      "|BUENOS AIRES|    8|          AVELLANEDA|0.022031823745410038|          SI|                   NO|                       NO|92.9|96.4|96.6|96.4|23.7|94.3|81.1|78.2|64.0|85.6|92.4|65.3|     1.0|\n",
      "|BUENOS AIRES|    9|            AYACUCHO|0.002447980416156...|          SI|                   SI|                       NO|92.6|97.0|89.4|99.0|24.5|98.1|82.9|68.9|64.8|74.3|85.7|51.7|     1.0|\n",
      "|BUENOS AIRES|   10|                AZUL|0.009791921664626682|          SI|                   NO|                       NO|93.8|96.2|93.1|98.1|25.1|95.3|81.4|78.2|67.9|76.6|87.7|58.0|     1.0|\n",
      "|BUENOS AIRES|   11|        BAHIA BLANCA|0.044063647490820076|          SI|                   NO|                       NO|95.4|97.1|96.4|98.5|29.5|96.7|83.8|85.1|61.3|85.9|92.8|69.6|     1.0|\n",
      "|BUENOS AIRES|   12|            BALCARCE|0.009791921664626682|          SI|                   NO|                       NO|91.6|96.4|90.3|97.9|27.5|95.8|82.2|68.1|65.4|75.9|86.2|57.6|     1.0|\n",
      "|BUENOS AIRES|   13|            BARADERO|0.003671970624235...|          SI|                   SI|                       NO|89.7|96.1|93.4|97.3|21.4|92.6|68.4|54.1|68.4|76.2|89.2|55.0|     1.0|\n",
      "|BUENOS AIRES|   14|       BENITO JUAREZ|0.006119951040391677|          SI|                   NO|                       NO|94.8|97.5|90.2|99.2|22.6|98.0|65.5|79.7|66.5|74.0|85.5|56.5|     1.0|\n",
      "|BUENOS AIRES|   15|         BERAZATEGUI| 0.01591187270501836|          SI|                   NO|                       NO|85.8|95.0|89.8|96.7|23.1|90.0|77.1|67.4|71.1|86.3|92.7|58.3|     1.0|\n",
      "|BUENOS AIRES|   16|             BERISSO|0.004895960832313341|          SI|                   SI|                       NO|85.0|91.5|91.5|95.7|22.9|87.2|50.2|63.2|73.6|82.1|90.9|57.2|     1.0|\n",
      "|BUENOS AIRES|   17|             BOLIVAR| 0.02692778457772338|          SI|                   NO|                       NO|94.0|97.8|92.0|98.8|23.4|97.3|79.1|68.3|64.8|74.3|85.5|53.7|     1.0|\n",
      "|BUENOS AIRES|   18|             BRAGADO|0.008567931456548347|          SI|                   NO|                       NO|92.8|96.7|86.8|98.6|25.5|95.4|69.9|70.2|71.1|85.3|90.0|59.4|     1.0|\n",
      "|BUENOS AIRES|   19|            BRANDSEN|0.003671970624235...|          SI|                   SI|                       NO|86.4|93.3|63.3|97.7|23.1|91.0|47.4|42.0|69.0|68.5|87.5|52.2|     1.0|\n",
      "|BUENOS AIRES|   20|             CAMPANA|0.007343941248470...|          SI|                   NO|                       NO|87.8|94.2|89.4|96.4|26.7|88.1|55.2|63.4|67.3|80.7|91.8|60.2|     1.0|\n",
      "+------------+-----+--------------------+--------------------+------------+---------------------+-------------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_fe = df_fe.withColumn(\"Cantidad de filiales\", col(\"Cantidad de filiales\") / max_cantidad)\n",
    "\n",
    "df_fe.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#4) MODELO DE REGRESIÓN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Se extrae la información geográfica y las sumas, solo se deja la columna Más de cinco filiales que será nuestra variable dependiente.\n",
    "#Las proporciones de localizaciones SI/NO son casi 60/30. \n",
    "#Se busca un modelo que a partir de los datos demográficos pueda determinar por SI/NO el valor de la columna Más de cinco filiales para cada departamento."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fe1 = df_fe.drop('Provincia')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fe2 = df_fe1.drop('Departamento/Partido')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_fe3 = df_fe2.drop('Hay filiales')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Orden: integer (nullable = true)\n",
      " |-- Cantidad de filiales: double (nullable = true)\n",
      " |-- Mas de cinco filiales: string (nullable = true)\n",
      " |-- PCR: double (nullable = true)\n",
      " |-- ACDV: double (nullable = true)\n",
      " |-- ARP: double (nullable = true)\n",
      " |-- BLV: double (nullable = true)\n",
      " |-- DMB: double (nullable = true)\n",
      " |-- BIAA: double (nullable = true)\n",
      " |-- DIRP: double (nullable = true)\n",
      " |-- GEC: double (nullable = true)\n",
      " |-- VP: double (nullable = true)\n",
      " |-- INT: double (nullable = true)\n",
      " |-- CINT: double (nullable = true)\n",
      " |-- CTE: double (nullable = true)\n",
      " |-- Cociente: double (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_fe4 = df_fe3.drop('Mas de cincuenta filiales')\n",
    "df_fe4.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|Orden|Cantidad de filiales|Mas de cinco filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|    1|0.007343941248470...|                    0|90.9|95.4|87.0|98.0|23.1|95.1|57.7|53.1|64.9|72.8|85.5|53.8|     1.0|\n",
      "|    2|0.003671970624235...|                    1|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|\n",
      "|    3|0.008567931456548347|                    0|95.6|97.2|90.4|98.8|18.1|97.5|49.7|75.7|69.2|80.9|88.3|56.4|     1.0|\n",
      "|    4|0.003671970624235...|                    1|96.4|97.4|91.1|99.0|22.7|97.8|53.1|69.4|68.7|78.4|88.2|60.0|     1.0|\n",
      "|    5|0.003671970624235...|                    1|93.0|96.3|71.3|98.2|27.0|96.2|77.1|61.3|69.2|79.2|87.6|58.3|     1.0|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_fe5 = df_fe4.withColumn(\"Mas de cinco filiales\", when(col(\"Mas de cinco filiales\") == \"SI\", 1).otherwise(0))\n",
    "df_fe5.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|Orden|Cantidad de filiales|Mas de cinco filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|    1|0.007343941248470...|                    0|90.9|95.4|87.0|98.0|23.1|95.1|57.7|53.1|64.9|72.8|85.5|53.8|     1.0|\n",
      "|    2|0.003671970624235...|                    1|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|\n",
      "|    3|0.008567931456548347|                    0|95.6|97.2|90.4|98.8|18.1|97.5|49.7|75.7|69.2|80.9|88.3|56.4|     1.0|\n",
      "|    4|0.003671970624235...|                    1|96.4|97.4|91.1|99.0|22.7|97.8|53.1|69.4|68.7|78.4|88.2|60.0|     1.0|\n",
      "|    5|0.003671970624235...|                    1|93.0|96.3|71.3|98.2|27.0|96.2|77.1|61.3|69.2|79.2|87.6|58.3|     1.0|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df_fe6 = df_fe5.withColumn(\"Mas de cinco filiales\", col(\"Mas de cinco filiales\").cast(\"int\"))\n",
    "df_fe6.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml.feature import VectorAssembler\n",
    "from pyspark.ml.classification import LogisticRegression\n",
    "from pyspark.ml import Pipeline\n",
    "from pyspark.ml.evaluation import BinaryClassificationEvaluator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Orden', 'Cantidad de filiales', 'Mas de cinco filiales', 'PCR', 'ACDV', 'ARP', 'BLV', 'DMB', 'BIAA', 'DIRP', 'GEC', 'VP', 'INT', 'CINT', 'CTE', 'Cociente']\n"
     ]
    }
   ],
   "source": [
    "column_names = df_fe6.columns\n",
    "\n",
    "print(column_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DataFrame[Orden: int, Cantidad de filiales: double, Mas de cinco filiales: int, PCR: double, ACDV: double, ARP: double, BLV: double, DMB: double, BIAA: double, DIRP: double, GEC: double, VP: double, INT: double, CINT: double, CTE: double, Cociente: double, features: vector]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_columns = [\"Orden\",\"Cantidad de filiales\",\"Mas de cinco filiales\", \"PCR\", \"ACDV\", \"ARP\", \"BLV\", \"DMB\", \"BIAA\", \"DIRP\", \"GEC\", \"VP\", \"INT\", \"CINT\", \"CTE\", \"Cociente\"]  # Lista de nombres de columnas de características\n",
    "assembler = VectorAssembler(inputCols=feature_columns, outputCol=\"features\")\n",
    "df_assembled = assembler.transform(df_fe6)\n",
    "df_assembled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Se fracciona el dataset modificado en datasets de entrenamiento y de testeo en proporción 70/30. \n",
    "#Para asegurar su replicación, se utiliza la semilla 31415."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train/test split\n",
    "train_df, test_df = df_fe6.randomSplit([0.7,0.3],seed=31415)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "364"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "132"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LogisticRegression(featuresCol=\"features\", labelCol=\"Mas de cinco filiales\", predictionCol=\"prediction\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipeline = Pipeline(stages=[assembler, lr])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = pipeline.fit(train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = model.transform(test_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------+----------+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|Mas de cinco filiales|prediction|Orden|Cantidad de filiales|Mas de cinco filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|\n",
      "+---------------------+----------+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "|                    1|       1.0|    2|0.003671970624235...|                    1|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|\n",
      "|                    0|       0.0|   12|0.009791921664626682|                    0|91.6|96.4|90.3|97.9|27.5|95.8|82.2|68.1|65.4|75.9|86.2|57.6|     1.0|\n",
      "|                    0|       0.0|   17| 0.02692778457772338|                    0|94.0|97.8|92.0|98.8|23.4|97.3|79.1|68.3|64.8|74.3|85.5|53.7|     1.0|\n",
      "|                    1|       1.0|   25|0.003671970624235...|                    1|88.5|95.7|84.6|98.2|20.7|93.0|57.2|53.5|66.5|74.9|88.2|51.3|     1.0|\n",
      "|                    0|       0.0|   28| 0.01346389228886169|                    0|92.5|95.5|73.6|98.7|25.2|93.9|62.9|59.2|66.4|79.7|89.5|57.9|     1.0|\n",
      "+---------------------+----------+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predictions.select(\"Mas de cinco filiales\", \"prediction\", *feature_columns).show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area Under ROC: 1.0\n"
     ]
    }
   ],
   "source": [
    "evaluator = BinaryClassificationEvaluator(labelCol=\"Mas de cinco filiales\", rawPredictionCol=\"prediction\", metricName=\"areaUnderROC\")\n",
    "area_under_roc = evaluator.evaluate(predictions)\n",
    "print(f\"Area Under ROC: {area_under_roc}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#De acuerdo al valor arrojado por el evaluador, el modelo tiene una capacidad de 100% de predecir la variable dependiente.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+--------------------+--------------------+--------------------+----------+\n",
      "|Orden|Cantidad de filiales|Mas de cinco filiales| PCR|ACDV| ARP| BLV| DMB|BIAA|DIRP| GEC|  VP| INT|CINT| CTE|Cociente|            features|       rawPrediction|         probability|prediction|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+--------------------+--------------------+--------------------+----------+\n",
      "|    2|0.003671970624235...|                    1|93.6|96.7|79.8|98.9|26.1|96.5|69.9|66.6|64.8|81.4|89.0|58.2|     1.0|[2.0,0.0036719706...|[-19.173521570977...|[4.71026543119338...|       1.0|\n",
      "|   12|0.009791921664626682|                    0|91.6|96.4|90.3|97.9|27.5|95.8|82.2|68.1|65.4|75.9|86.2|57.6|     1.0|[12.0,0.009791921...|[20.2355004464511...|[0.99999999837132...|       0.0|\n",
      "|   17| 0.02692778457772338|                    0|94.0|97.8|92.0|98.8|23.4|97.3|79.1|68.3|64.8|74.3|85.5|53.7|     1.0|[17.0,0.026927784...|[24.8585731892307...|[0.99999999998400...|       0.0|\n",
      "|   25|0.003671970624235...|                    1|88.5|95.7|84.6|98.2|20.7|93.0|57.2|53.5|66.5|74.9|88.2|51.3|     1.0|[25.0,0.003671970...|[-19.870848342394...|[2.34530977223162...|       1.0|\n",
      "|   28| 0.01346389228886169|                    0|92.5|95.5|73.6|98.7|25.2|93.9|62.9|59.2|66.4|79.7|89.5|57.9|     1.0|[28.0,0.013463892...|[21.2448159554594...|[0.99999999940640...|       0.0|\n",
      "|   29|0.012239902080783354|                    0|92.9|96.1|82.3|98.4|25.3|95.1|76.2|71.5|65.1|82.1|89.0|60.5|     1.0|[29.0,0.012239902...|[21.3805452998342...|[0.99999999948174...|       0.0|\n",
      "|   31|0.004895960832313341|                    1|95.8|97.2|95.7|99.2|22.6|97.7|77.0|82.8|59.9|89.4|93.0|68.5|     1.0|[31.0,0.004895960...|[-17.772779642448...|[1.91152448309680...|       1.0|\n",
      "|   33|0.006119951040391677|                    0|94.7|96.3|90.5|98.8|24.9|96.3|80.0|66.1|69.5|81.6|88.5|58.6|     1.0|[33.0,0.006119951...|[20.0588353224950...|[0.99999999805661...|       0.0|\n",
      "|   51|0.002447980416156...|                    1|89.8|93.5|60.2|98.1|21.5|91.4|36.0|46.6|62.5|77.2|89.8|55.2|     1.0|[51.0,0.002447980...|[-21.078711533138...|[7.00861002015536...|       1.0|\n",
      "|   55| 0.07343941248470012|                    0|94.2|96.9|91.8|98.9|31.7|96.3|87.4|81.3|62.1|84.7|92.6|66.6|     1.0|[55.0,0.073439412...|[41.3353277030044...|[1.0,1.1176228461...|       0.0|\n",
      "|   60|0.006119951040391677|                    0|95.5|97.4|86.6|99.3|19.1|98.1|62.7|67.3|68.1|80.5|88.9|58.0|     1.0|[60.0,0.006119951...|[18.8052091963311...|[0.99999999319228...|       0.0|\n",
      "|   61|0.002447980416156...|                    1|92.8|96.6|88.9|98.8|23.0|96.3|78.8|77.3|66.0|78.2|87.2|57.6|     1.0|[61.0,0.002447980...|[-19.225775903817...|[4.47045381758337...|       1.0|\n",
      "|   65|0.012239902080783354|                    0|93.5|97.3|91.2|98.4|28.6|96.4|86.5|67.0|65.4|84.4|91.8|66.2|     1.0|[65.0,0.012239902...|[22.8634102655514...|[0.99999999988236...|       0.0|\n",
      "|   71|0.006119951040391677|                    0|92.8|95.6|91.1|98.3|23.9|95.9|73.4|67.7|71.0|68.2|83.4|50.4|     1.0|[71.0,0.006119951...|[18.4432415679348...|[0.99999999022308...|       0.0|\n",
      "|   74|0.008567931456548347|                    0|93.5|95.4|72.8|98.9|21.3|95.9|62.7|66.1|66.6|80.9|87.9|56.1|     1.0|[74.0,0.008567931...|[19.3866993301621...|[0.99999999619404...|       0.0|\n",
      "|   81|0.009791921664626682|                    0|84.8|89.5|14.1|96.4|20.8|82.9| 9.3|54.7|68.8|82.2|91.4|54.8|     1.0|[81.0,0.009791921...|[18.3748973895957...|[0.99999998953152...|       0.0|\n",
      "|   82|0.003671970624235...|                    1|93.5|95.7|60.2|98.9|26.6|96.1|30.9|48.2|67.7|71.9|90.8|56.8|     1.0|[82.0,0.003671970...|[-20.692322242182...|[1.03142732328056...|       1.0|\n",
      "|   88| 0.01835985312117503|                    0|75.5|85.4|35.8|95.2|18.1|76.9|32.2|35.0|74.0|75.7|90.7|45.3|     1.0|[88.0,0.018359853...|[22.8288662774619...|[0.99999999987822...|       0.0|\n",
      "|   92| 0.01835985312117503|                    0|95.5|96.3|88.1|98.9|24.4|95.6|51.7|87.4|63.8|81.6|89.6|64.8|     1.0|[92.0,0.018359853...|[22.0465437330412...|[0.99999999973373...|       0.0|\n",
      "|   93|0.007343941248470...|                    0|91.2|94.7|95.0|95.8|21.9|96.1|74.3|88.3|63.8|79.8|89.4|59.7|     1.0|[93.0,0.007343941...|[19.5288391181365...|[0.99999999669833...|       0.0|\n",
      "+-----+--------------------+---------------------+----+----+----+----+----+----+----+----+----+----+----+----+--------+--------------------+--------------------+--------------------+----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "predictions.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "ename": "AnalysisException",
     "evalue": "'Attribute name \"Cantidad de filiales\" contains invalid character(s) among \" ,;{}()\\\\n\\\\t=\". Please use alias to rename it.;'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m/opt/spark/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 328\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    329\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o1021.parquet.\n: org.apache.spark.sql.AnalysisException: Attribute name \"Cantidad de filiales\" contains invalid character(s) among \" ,;{}()\\n\\t=\". Please use alias to rename it.;\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetSchemaConverter$.checkConversionRequirement(ParquetSchemaConverter.scala:583)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetSchemaConverter$.checkFieldName(ParquetSchemaConverter.scala:570)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetWriteSupport$$anonfun$setSchema$2.apply(ParquetWriteSupport.scala:444)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetWriteSupport$$anonfun$setSchema$2.apply(ParquetWriteSupport.scala:444)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetWriteSupport$.setSchema(ParquetWriteSupport.scala:444)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetFileFormat.prepareWrite(ParquetFileFormat.scala:111)\n\tat org.apache.spark.sql.execution.datasources.FileFormatWriter$.write(FileFormatWriter.scala:103)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelationCommand.run(InsertIntoHadoopFsRelationCommand.scala:159)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult$lzycompute(commands.scala:104)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.sideEffectResult(commands.scala:102)\n\tat org.apache.spark.sql.execution.command.DataWritingCommandExec.doExecute(commands.scala:122)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:131)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:127)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$executeQuery$1.apply(SparkPlan.scala:155)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:152)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:127)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:83)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:81)\n\tat org.apache.spark.sql.DataFrameWriter$$anonfun$runCommand$1.apply(DataFrameWriter.scala:676)\n\tat org.apache.spark.sql.DataFrameWriter$$anonfun$runCommand$1.apply(DataFrameWriter.scala:676)\n\tat org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:80)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:127)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:75)\n\tat org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:676)\n\tat org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:285)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:271)\n\tat org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:229)\n\tat org.apache.spark.sql.DataFrameWriter.parquet(DataFrameWriter.scala:566)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\n",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mAnalysisException\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-108-dc001ed45232>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mruta_parquet\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"dataset/predicciones.parquet\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mpredictions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mruta_parquet\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/opt/spark/python/pyspark/sql/readwriter.py\u001b[0m in \u001b[0;36mparquet\u001b[0;34m(self, path, mode, partitionBy, compression)\u001b[0m\n\u001b[1;32m    842\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpartitionBy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    843\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_set_opts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcompression\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 844\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jwrite\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    845\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    846\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0msince\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1.6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1255\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m         return_value = get_return_value(\n\u001b[0;32m-> 1257\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/spark/python/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     67\u001b[0m                                              e.java_exception.getStackTrace()))\n\u001b[1;32m     68\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'org.apache.spark.sql.AnalysisException: '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 69\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mAnalysisException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m': '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     70\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'org.apache.spark.sql.catalyst.analysis'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mAnalysisException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m': '\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstackTrace\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAnalysisException\u001b[0m: 'Attribute name \"Cantidad de filiales\" contains invalid character(s) among \" ,;{}()\\\\n\\\\t=\". Please use alias to rename it.;'"
     ]
    }
   ],
   "source": [
    "ruta_parquet = \"dataset/predicciones.parquet\"\n",
    "predictions.write.parquet(ruta_parquet)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
